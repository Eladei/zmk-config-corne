/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>

/ {
    combos {
        compatible = "zmk,combos";

        combo_esc {
            timeout-ms = <50>;
            key-positions = <0 1>;
            bindings = <&kp ESC>;
        };
    };

    behaviors {
        ss_hs_modmorph: ss_hs_modmorph {
            compatible = "zmk,behavior-mod-morph";
            label = "SS_HS_MODMORPH";
            bindings = <&kp M>, <&kp RIGHT_BRACKET>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        kh_hs_tapdance: kh_hs_tapdance {
            compatible = "zmk,behavior-tap-dance";
            label = "KH_HS_TAPDANCE";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp LEFT_BRACKET>, <&kp RIGHT_BRACKET>;
        };

        hrm: hrm {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            quick-tap-ms = <200>;
            require-prior-idle-ms = <125>;
            bindings = <&kp>, <&kp>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&kp TAB           &kp Q  &kp W  &kp E  &kp R      &kp T             &kp Y          &kp U      &kp I      &kp O    &kp P          &kp LEFT_BRACKET
&kp BACKSPACE     &kp A  &kp S  &kp D  &kp F      &kp G             &kp H          &kp J      &kp K      &kp L    &kp SEMICOLON  &kp SQT
&kp LEFT_CONTROL  &kp Z  &kp X  &kp C  &kp V      &kp B             &kp N          &kp M      &kp COMMA  &kp DOT  &kp SLASH      &kp ENTER
                                &mo 1  &kp SPACE  &kp LEFT_SHIFT    &kp RIGHT_ALT  &kp SPACE  &mo 2
            >;
        };

        calc_and_operations {
            bindings = <
&kp C_VOLUME_UP    &none      &none      &kp LC(F)       &none           &none    &none                &kp KP_NUMBER_7  &kp KP_NUMBER_8  &kp KP_NUMBER_9  &kp KP_SLASH  &kp KP_ASTERISK
&kp C_VOLUME_DOWN  &kp LC(A)  &kp LC(X)  &kp LC(C)       &kp LC(V)       &none    &kp C_AL_CALCULATOR  &kp KP_NUMBER_4  &kp KP_NUMBER_5  &kp KP_NUMBER_6  &kp KP_MINUS  &kp KP_PLUS
&none              &kp LC(Z)  &kp LC(Y)  &kp LC(INSERT)  &kp LS(INSERT)  &none    &none                &kp KP_NUMBER_1  &kp KP_NUMBER_2  &kp KP_NUMBER_3  &kp KP_DOT    &none
                                         &none           &none           &none    &kp ENTER            &kp KP_NUMBER_0  &none
            >;
        };

        special_keys_and_arrows {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BKSP |
            // | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
            // | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&kp ESCAPE  &kp F1  &kp F2   &kp F3        &kp F4            &none             &none    &none           &kp UP_ARROW    &none            &none  &none
&kp TAB     &kp F5  &kp F6   &kp F7        &kp F8            &none             &none    &kp LEFT_ARROW  &kp DOWN_ARROW  &kp RIGHT_ARROW  &none  &kp PRINTSCREEN
&none       &kp F9  &kp F10  &kp F11       &kp F12           &none             &kp END  &kp DELETE      &none           &none            &none  &kp LEFT_WIN
                             &kp LEFT_ALT  &kp LEFT_CONTROL  &kp LEFT_SHIFT    &none    &none           &none
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        qwerty_special_symbols_layer {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };
};
