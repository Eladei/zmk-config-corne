/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#define ZMK_POINTING_DEFAULT_MOVE_VAL 800  // default: 600
#define ZMK_POINTING_DEFAULT_SCRL_VAL 20    // default: 10

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

/ {
    combos {
        compatible = "zmk,combos";

        combo_left_bracket {
            bindings = <&kp LEFT_BRACKET>;
            key-positions = <9 10>;
        };

        combo_single_quote {
            bindings = <&kp SINGLE_QUOTE>;
            key-positions = <21 22>;
        };
    };

    behaviors {
        ss_hs_modmorph: ss_hs_modmorph {
            compatible = "zmk,behavior-mod-morph";
            label = "SS_HS_MODMORPH";
            bindings = <&kp M>, <&kp RIGHT_BRACKET>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        kh_hs_tapdance: kh_hs_tapdance {
            compatible = "zmk,behavior-tap-dance";
            label = "KH_HS_TAPDANCE";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp LEFT_BRACKET>, <&kp RIGHT_BRACKET>;
        };

        hrm: hrm {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            quick-tap-ms = <200>;
            require-prior-idle-ms = <125>;
            bindings = <&kp>, <&kp>;
        };

        hrm_with_layers: hrm_with_layers {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            quick-tap-ms = <200>;
            require-prior-idle-ms = <125>;
            label = "HRM_WITH_LAYERS";
            bindings = <&mo>, <&kp>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&none  &kp Q            &kp W            &kp E              &kp R             &kp T            &kp Y      &kp U             &kp I               &kp O            &kp P                    &none
&none  &hrm LEFT_WIN A  &hrm LEFT_ALT S  &hrm LEFT_SHIFT D  &hrm LCTRL F      &kp G            &kp H      &hrm RCTRL J      &hrm RIGHT_SHIFT K  &hrm LEFT_ALT L  &hrm LEFT_WIN SEMICOLON  &none
&none  &kp Z            &kp X            &kp C              &hrm RIGHT_ALT V  &kp B            &kp N      &hrm RIGHT_ALT M  &kp COMMA           &kp DOT          &kp SLASH                &none
                                         &none              &lt 1 SPACE       &kp BACKSPACE    &kp ENTER  &lt 2 SPACE       &none
            >;
        };

        calc_and_operations {
            bindings = <
&none  &kp C_VOLUME_DOWN  &kp C_VOLUME_UP  &kp LC(Y)    &kp LC(LS(T))  &none             &none          &kp KP_NUMBER_7  &kp KP_NUMBER_8  &kp KP_NUMBER_9  &none  &none
&none  &kp LC(A)          &kp LC(S)        &kp LS(TAB)  &kp LC(F)      &kp DELETE        &none          &kp KP_NUMBER_4  &kp KP_NUMBER_5  &kp KP_NUMBER_6  &none  &none
&none  &kp LC(Z)          &kp LC(X)        &kp LC(C)    &kp LC(V)      &kp LC(DELETE)    &kp C_AL_CALC  &kp KP_NUMBER_1  &kp KP_NUMBER_2  &kp KP_NUMBER_3  &none  &none
                                           &none        &none          &none             &kp ENTER      &kp KP_NUMBER_0  &none
            >;
        };

        special_keys_and_arrows {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BKSP |
            // | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
            // | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&none  &kp ESCAPE         &kp F1            &kp F2              &kp F3                &kp F4        &kp END          &none                          &kp UP_ARROW                 &none                      &none         &none
&none  &hrm LEFT_WIN TAB  &hrm LEFT_ALT F5  &hrm LEFT_SHIFT F6  &hrm LEFT_CONTROL F7  &kp F8        &kp INSERT       &hrm RIGHT_CONTROL LEFT_ARROW  &hrm RIGHT_SHIFT DOWN_ARROW  &hrm LEFT_ALT RIGHT_ARROW  &kp LEFT_WIN  &none
&none  &kp CAPSLOCK       &kp F9            &kp F10             &kp F11               &kp F12       &kp PRINTSCREEN  &none                          &none                        &none                      &none         &none
                                            &none               &none                 &kp DELETE    &none            &none                          &none
            >;
        };

        mouse {
            bindings = <
&trans  &trans  &trans  &trans  &trans      &trans    &trans  &mkp LCLK       &mmv MOVE_UP    &mkp RCLK        &trans  &trans
&trans  &trans  &trans  &trans  &kp LSHIFT  &trans    &trans  &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_RIGHT  &trans  &trans
&trans  &trans  &trans  &trans  &trans      &trans    &trans  &msc SCRL_UP    &trans          &msc SCRL_DOWN   &trans  &trans
                        &trans  &kp LCTRL   &trans    &trans  &trans          &trans
            >;
        };
    };

    conditional_layers { compatible = "zmk,conditional-layers"; };
};
