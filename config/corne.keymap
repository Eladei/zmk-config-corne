/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#define ZMK_POINTING_DEFAULT_MOVE_VAL 800  // default: 600
#define ZMK_POINTING_DEFAULT_SCRL_VAL 20    // default: 10

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/pointing.h>

/ {
    combos {
        compatible = "zmk,combos";

        combo_esc {
            timeout-ms = <50>;
            key-positions = <0 1>;
            bindings = <&kp ESC>;
        };
    };

    behaviors {
        ss_hs_modmorph: ss_hs_modmorph {
            compatible = "zmk,behavior-mod-morph";
            label = "SS_HS_MODMORPH";
            bindings = <&kp M>, <&kp RIGHT_BRACKET>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        kh_hs_tapdance: kh_hs_tapdance {
            compatible = "zmk,behavior-tap-dance";
            label = "KH_HS_TAPDANCE";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp LEFT_BRACKET>, <&kp RIGHT_BRACKET>;
        };

        hrm: hrm {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            quick-tap-ms = <200>;
            require-prior-idle-ms = <125>;
            bindings = <&kp>, <&kp>;
        };

        hrm_with_layers: hrm_with_layers {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            quick-tap-ms = <200>;
            require-prior-idle-ms = <125>;
            label = "HRM_WITH_LAYERS";
            bindings = <&mo>, <&kp>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&none  &kp Q    &kp W  &kp E  &kp R             &kp T              &kp Y        &kp U            &kp I      &kp O    &hrm LEFT_BRACKET P          &none
&none  &lt 3 A  &kp S  &kp D  &hrm LSHFT F      &kp G              &kp H        &hrm RSHFT J     &kp K      &kp L    &hrm SINGLE_QUOTE SEMICOLON  &none
&none  &kp Z    &kp X  &kp C  &kp V             &kp B              &kp N        &kp M            &kp COMMA  &kp DOT  &kp SLASH                    &none
                       &none  &hrm LCTRL SPACE  &lt 1 BACKSPACE    &lt 2 ENTER  &hrm RALT SPACE  &none
            >;
        };

        calc_and_operations {
            bindings = <
&none  &none  &none  &none          &kp C_VOLUME_UP    &none    &kp KP_SLASH   &kp KP_NUMBER_7  &kp KP_NUMBER_8  &kp KP_NUMBER_9  &kp KP_MULTIPLY  &none
&none  &none  &none  &kp LC(LSHFT)  &kp C_VOLUME_DOWN  &none    &kp KP_MINUS   &kp KP_NUMBER_4  &kp KP_NUMBER_5  &kp KP_NUMBER_6  &kp KP_PLUS      &none
&none  &none  &none  &none          &none              &none    &kp C_AL_CALC  &kp KP_NUMBER_1  &kp KP_NUMBER_2  &kp KP_NUMBER_3  &kp KP_DOT       &none
                     &none          &none              &none    &kp ENTER      &kp KP_NUMBER_0  &none
            >;
        };

        special_keys_and_arrows {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BKSP |
            // | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
            // | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&none  &kp ESCAPE        &kp F1  &kp F2   &kp F3        &kp F4            &none       &none           &kp UP_ARROW    &none            &kp CAPSLOCK  &none
&none  &kp TAB           &kp F5  &kp F6   &kp F7        &kp F8            &kp INSERT  &kp LEFT_ARROW  &kp DOWN_ARROW  &kp RIGHT_ARROW  &kp PSCRN     &none
&none  &kp LEFT_CONTROL  &kp F9  &kp F10  &kp F11       &kp F12           &kp END     &kp DELETE      &none           &none            &kp LEFT_WIN  &none
                                 &none    &kp LEFT_ALT  &kp LEFT_SHIFT    &none       &none           &none
            >;
        };

        mouse {
            bindings = <
&trans  &trans  &trans  &trans  &trans      &trans    &trans  &mkp LCLK       &mmv MOVE_UP    &mkp RCLK        &trans  &trans
&trans  &trans  &trans  &trans  &kp LSHIFT  &trans    &trans  &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_RIGHT  &trans  &trans
&trans  &trans  &trans  &trans  &trans      &trans    &trans  &msc SCRL_UP    &trans          &msc SCRL_DOWN   &trans  &trans
                        &trans  &kp LCTRL   &trans    &trans  &trans          &trans
            >;
        };
    };

    conditional_layers { compatible = "zmk,conditional-layers"; };
};
