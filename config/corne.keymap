/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>

/ {
    combos {
        compatible = "zmk,combos";

        combo_esc {
            timeout-ms = <50>;
            key-positions = <0 1>;
            bindings = <&kp ESC>;
        };
    };

    behaviors {
        ss_hs_modmorph: ss_hs_modmorph {
            compatible = "zmk,behavior-mod-morph";
            label = "SS_HS_MODMORPH";
            bindings = <&kp M>, <&kp RIGHT_BRACKET>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        kh_hs_tapdance: kh_hs_tapdance {
            compatible = "zmk,behavior-tap-dance";
            label = "KH_HS_TAPDANCE";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp LEFT_BRACKET>, <&kp RIGHT_BRACKET>;
        };

        hrm: hrm {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            quick-tap-ms = <200>;
            require-prior-idle-ms = <125>;
            bindings = <&kp>, <&kp>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&kp TAB         &kp Q  &kp W  &kp E             &kp R  &kp T        &kp Y      &kp U  &kp I          &kp O    &kp P          &kp LEFT_BRACKET
&kp BACKSPACE   &kp A  &kp S  &kp D             &kp F  &kp G        &kp H      &kp J  &kp K          &kp L    &kp SEMICOLON  &kp SQT
&kp LEFT_SHIFT  &kp Z  &kp X  &kp C             &kp V  &kp B        &kp N      &kp M  &kp COMMA      &kp DOT  &kp SLASH      &kp ENTER
                              &kp LEFT_CONTROL  &mo 1  &kp SPACE    &kp SPACE  &mo 2  &kp RIGHT_ALT
            >;
        };

        calc_arrows_and_special_keys {
            bindings = <
&kp ESCAPE      &none                &kp LC(BACKSPACE)  &kp UP_ARROW    &kp LC(DELETE)      &kp C_VOLUME_UP       &none                &kp KP_NUMBER_7  &kp KP_NUMBER_8  &kp KP_NUMBER_9      &kp KP_SLASH  &kp KP_ASTERISK
&kp BACKSPACE   &kp LEFT_SHIFT       &kp LEFT_ARROW     &kp DOWN_ARROW  &kp RIGHT_ARROW     &kp C_VOLUME_DOWN     &kp C_AL_CALCULATOR  &kp KP_NUMBER_4  &kp KP_NUMBER_5  &kp LS(KP_NUMBER_6)  &kp KP_MINUS  &kp KP_PLUS
&kp LA(ESCAPE)  &kp LA(PRINTSCREEN)  &kp LC(INSERT)     &kp LS(INSERT)  &kp LC(LEFT_SHIFT)  &kp LC(LA(DELETE))    &none                &kp KP_NUMBER_1  &kp KP_NUMBER_2  &kp KP_NUMBER_3      &kp KP_DOT    &kp KP_ENTER
                                                        &kp LS(DELETE)  &none               &none                 &none                &kp KP_NUMBER_0  &none
            >;
        };

        layer_dvorak_special_symbols {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BKSP |
            // | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
            // | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&kp F1  &kp F2            &kp F3                 &kp F4            &kp F5     &kp F6       &kp F7                &kp F8     &kp F9             &kp F10                &kp F11        &kp F12
&none   &kp LS(NUMBER_1)  &kp NUMBER_2           &kp NUMBER_3      &kp N5     &kp PIPE     &kp NUMBER_1          &kp N8     &kp NUMBER_4       &kp N0                 &kp BSLH       &none
&none   &kp TILDE         &kp LS(RIGHT_BRACKET)  &kp GRAVE         &kp LS(W)  &kp MINUS    &kp LS(LEFT_BRACKET)  &kp LS(E)  &kp RIGHT_BRACKET  &kp LS(DOUBLE_QUOTES)  &kp LS(EQUAL)  &none
                                                 &kp LEFT_CONTROL  &none      &none        &none                 &none      &kp RIGHT_ALT
            >;
        };

        layer_qwerty_special_symbols {
            bindings = <
&kp F1  &kp F2       &kp F3            &kp F4            &kp F5         &kp F6             &kp F7        &kp F8            &kp F9           &kp F10            &kp F11    &kp F12
&none   &kp PERCENT  &kp LEFT_BRACKET  &kp LEFT_BRACE    &kp LPAR       &kp PIPE           &kp AMPS      &kp RPAR          &kp RIGHT_BRACE  &kp RIGHT_BRACKET  &kp BSLH   &none
&none   &kp TILDE    &kp CARET         &kp DOLLAR        &kp LESS_THAN  &kp EXCLAMATION    &kp QUESTION  &kp GREATER_THAN  &kp AT_SIGN      &kp UNDERSCORE     &kp GRAVE  &none
                                       &kp LEFT_CONTROL  &none          &none              &none         &none             &kp RIGHT_ALT
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        qwerty_special_symbols_layer {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };
};
